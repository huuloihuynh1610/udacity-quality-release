name: Azure Pipelines

variables:
  python.version: '3.7.6'

stages:
- stage: Build
  jobs:
  - job: IntegrationTest
    steps:
    - script: |
        npm install -g newman
      displayName: Install Newman
    - script: |
        newman run regression_collection.json -e environment.json -r junit,cli
        newman run validation_collection.json -e environment.json -r junit,cli
      displayName: Run integration test
      workingDirectory: $(System.DefaultWorkingDirectory)/automatedtesting/postman
      continueOnError: 'true'
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: ''
        sshPublicKey: ''
        sshPassphrase: ''
        sshKeySecureFile: ''
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: JUnit
        testResultsFiles: '*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/newman'
        mergeTestResults: true
        testRunTitle: 'Integration Test'
    - task: ArchiveFiles@2
      displayName: ArchiveSelenium
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        verbose: true
    - task: PublishPipelineArtifact@1
      displayName: PublishSeleniumArtifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifactName: 'selenium'
  - job: BuildFakeRestAPI
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
  - job: UploadUITest
    steps:
    - publish: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium/login.py'
      displayName: 'Upload UI Test Suite1'
      artifact: ui-test   
- stage: Deploy
  jobs:
  - job: ProvisionAzureResources
    steps:
      - script: |
          sudo apt-get update
          sudo apt-get install -y gnupg software-properties-common curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update
          sudo apt-get install terraform
        displayName: 'Install Terraform'
      - script: |
          echo $(SSH_PUBLIC_KEY) > id_rsa.pub
          terraform init -backend-config=backend.conf
          terraform apply -auto-approve
          terraform output -raw vm_public_ip
        displayName: 'Apply Terraform'
        workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environments/test
  - deployment: DeployFakeRestAPI
    dependsOn: ProvisionAzureResources
    environment: TEST
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'Azure subscription 1(76c7270a-0d31-4261-9422-e3fdef5764b9)'
              appName: 'quality-releases-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
- stage: Test
  jobs:
  - deployment: run_ui_tests
    displayName: FunctionalTests
    environment:
      name: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              sudo apt update
              sudo apt install software-properties-common -y
              sudo apt-add-repository ppa:universe -y
              sudo apt-get update
              sudo apt-get install zip unzip -y
              sudo apt-get install -y chromium-browser
              sudo apt-get install -y chromium-chromedriver
              sudo apt-get install python3-pip -y
              sudo python3 -m pip install --upgrade pip
              sudo wget https://files.pythonhosted.org/packages/ed/9c/9030520bf6ff0b4c98988448a93c04fcbd5b13cd9520074d8ed53569ccfe/selenium-3.141.0.tar.gz
              sudo tar -zxvf selenium-3.141.0.tar.gz
              cd selenium-3.141.0/
              sudo python3 setup.py install
              sudo python3 -c "import selenium; print('Selenium Version:', selenium.__version__)"
              cd $(Pipeline.Workspace)/selenium
              find . -type f ! -name 'selenium-$(Build.BuildId).zip' -delete 
              unzip -o $(Pipeline.Workspace)/selenium/selenium-$(Build.BuildId) -d .
              sudo mkdir -p /var/logs/selenium && sudo chmod 664 /var/logs/selenium
              #sudo python3 -u login.py 2>&1 | sudo tee -a /var/logs/selenium/ui_tests.log
              sudo python3 -u login.py | sudo dd of=/var/logs/selenium/ui_tests.log
              cd $(System.DefaultWorkingDirectory)
              mkdir -p logs/selenium
              sudo cp /var/logs/selenium/ui_tests.log logs/selenium/ui_tests.log
              sudo chmod 775 logs/selenium/ui_tests.log
              cat logs/selenium/ui_tests.log
            displayName: Execute UI functional tests using Selenium
          - task: PublishPipelineArtifact@1
            displayName: Publish logs from Selenium tests
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/logs/selenium/ui_tests.log'
              artifactName: 'selenium-logs-atf'
  - job: newman_test
    displayName: IntegrationTests
    steps: 
      - task: NodeTool@0
        displayName: Install Node v12.X
        inputs:
          versionSpec: '12.x'
      - bash: |
          npm install -g newman
          newman --version
          mkdir -p log/newman
        displayName: Install Newman
      - bash: |
          newman run automatedtesting/postman/regression_collection.json \
                    --reporters cli,junit \
                    --reporter-junit-export log/newman/RegressionTests.xml \
                    --suppress-exit-code
        displayName: Regression tests
      - bash: |
          newman run automatedtesting/postman/validation_collection.json \
                    --reporters cli,junit \
                    --reporter-junit-export log/newman/ValidationTests.xml
          ls -la $(System.DefaultWorkingDirectory)/log/newman/
        displayName: Data validation tests
      - task: PublishPipelineArtifact@1
        displayName: Publish Newman logs
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/log/newman'
          artifactName: 'newman-logs-atf'
      - task: PublishTestResults@2
        displayName: 'Publish Newman test results'
        inputs:
          testRunner: 'JUnit'
          searchFolder: '$(System.DefaultWorkingDirectory)/log/newman'
          testResultsFiles: '*.xml'
          mergeTestResults: true
          testRunTitle: 'PublishNewmanTestResults'
  - job: performance_tests
    displayName: PerformanceTests
    steps:
    - bash: |
        sudo apt-get install openjdk-11-jre-headless -y
        java --version
        wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.tgz -O jmeter.tgz
        tar xzvf jmeter.tgz
        apache-jmeter-5.4/bin/jmeter --version
        mkdir -p log/jmeter
      displayName: Install JMeter
    - bash: |
        apache-jmeter-5.4/bin/jmeter -n -t automatedtesting/jmeter/stress.jmx \
                                    -l log/jmeter/stress-test-result.jtl \
                                    -e -f -o log/jmeter/stress-test-html-report \
                                    -j log/jmeter/jmeter-stress-test.log
        cat log/jmeter/jmeter-stress-test.log
      displayName: Spike Test
    - bash: |
        apache-jmeter-5.4/bin/jmeter -n -t automatedtesting/jmeter/endurance.jmx \
                                    -l log/jmeter/endurance-test-result.jtl \
                                    -e -f -o log/jmeter/endurance-test-html-report \
                                    -j log/jmeter/jmeter-endurance-test.log
        cat log/jmeter/jmeter-endurance-test.log                             
      displayName: Endurance Test
    - task: ArchiveFiles@2
      displayName: Archive JMeter Stress Test HTML Report
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report-$(Build.BuildId).zip'
        verbose: true
    - task: ArchiveFiles@2
      displayName: Archive JMeter endurance test HTML report
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report-$(Build.BuildId).zip'
        verbose: true
    - bash: |
        rm -rf log/jmeter/stress-test-html-report
        rm -rf log/jmeter/endurance-test-html-report
        cd log/jmeter/
      displayName: Delete initial JMeter HTML test reports
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
        artifactName: 'jmeter-logs-atf'
      displayName: Publish logs from JMeter tests